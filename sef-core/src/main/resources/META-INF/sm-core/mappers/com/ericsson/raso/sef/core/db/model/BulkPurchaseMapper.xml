<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        

<mapper namespace="com.ericsson.sm.core.db.mapper.BulkPurchaseMapper">

	<resultMap id="SequenceResult" type="SmSequence">
		<result property="seq" column="seq" />
		<result property="rand" column="rand" />
	</resultMap>

	<select id="purchaseSequence" resultMap="SequenceResult" parameterType="String">
		select purchase_sequence.nextval as seq, #{rand} as rand from dual
	</select>
	
	<select id="commerceTrailSequence" resultMap="SequenceResult" parameterType="String">
		select commerce_trail_sequence.nextval as seq, #{rand} as rand from dual
	</select>
	
	<insert id="loadDump" parameterType="java.util.List">
		insert all
		 <foreach collection="commerceTrail" item="ct" separator="" index="index">
        	into SUBSCRIPTION_DUMP (ACCOUNT, PLAN_CODE, VOUCHER_CODE, EXPIRY_DTTM, LAST_EXPIRY_DTTM, UNUSED_RENEWAL_CNT) VALUES (#{account}, #{planCode}, #{voucherCode}, #{expiryDttm}, #{lastExpiryDttm}, #{unusedRenewalCnt});
        </foreach>
    </insert>
	
	<insert id="createBulkPurchase" parameterType="java.util.Map">
		insert all
		 <foreach collection="commerceTrail" item="ct" separator="" index="index">
        	into commerce_trail (event_id,event_timestamp,user_id,event_type) values (#{ct.eventId}, #{ct.eventTimestamp}, #{ct.userId}, #{ct.eventType})
        </foreach>
         <foreach collection="purchase" item="p" separator="" index="index">
			into purchase (event_id,purchase_id,purchase_type,product_id,price,currency_code,purchase_created,recurrence,recurrent_purchase_id,purchase_state,expiry_date) values (#{p.eventId}, #{p.purchaseId}, #{p.purchaseType},#{p.productId},#{p.price},#{p.currencyCode}, #{p.purchaseCreated},#{p.recurrence},#{p.recurrentPurchaseId},#{p.purchaseState},#{p.expiryTime})
        </foreach>
        <foreach collection="scheduledRequest" item="s" separator="" index="index">
			into scheduled_request (id,userid,msisdn,jobid,requestid,offerid,purchaseid,created,status,lifecycle_event,resourceid) values (#{s.id}, #{s.userId},#{s.msisdn}, #{s.jobId}, #{s.requestId}, #{s.offerId}, #{s.purchaseId}, #{s.created}, #{s.status},#{s.lifeCycleEvent},#{s.resourceId})
        </foreach>
        <foreach collection="scheduledRequestMeta" item="sm" separator="" index="index">
       		into scheduled_request_meta (scheduled_request_id,attribute_name,attribute_value) values (#{sm.scheduledRequestId},#{sm.key},#{sm.value})
       	</foreach>
        <foreach collection="jobDetail" item="jd" separator="" index="index">
		    into QRTZ_JOB_DETAILS (SCHED_NAME, JOB_NAME, JOB_GROUP, JOB_CLASS_NAME, IS_DURABLE, IS_NONCONCURRENT, IS_UPDATE_DATA, REQUESTS_RECOVERY) values('activation-scheduler', #{jd.jobName},'DEFAULT', #{jd.jobClassName}, 0,0,0,0)
            into QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP, JOB_NAME, JOB_GROUP, NEXT_FIRE_TIME, PREV_FIRE_TIME, PRIORITY, TRIGGER_STATE, TRIGGER_TYPE, START_TIME, END_TIME, MISFIRE_INSTR) values('activation-scheduler', #{jd.triggerName}, 'DEFAULT',#{jd.jobName},'DEFAULT', #{jd.nextFireTime}, -1, 5, 'WAITING','SIMPLE', #{jd.startTime}, 0, 0)
       		into QRTZ_SIMPLE_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP, REPEAT_COUNT, REPEAT_INTERVAL, TIMES_TRIGGERED) values ('activation-scheduler', #{jd.triggerName}, 'DEFAULT', #{jd.repeatCount}, 86400000, 0)
        </foreach>
        SELECT * FROM dual
    </insert>
	
</mapper>