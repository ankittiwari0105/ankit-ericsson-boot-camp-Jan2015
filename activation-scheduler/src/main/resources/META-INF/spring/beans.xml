<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans"	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"	xmlns:camel="http://camel.apache.org/schema/spring" xmlns:q0="http://nsn.com/ossbss/charge.once/wsdl/entity/Tis/xsd/1"	xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:osgi="http://www.springframework.org/schema/osgi"	xmlns:httpj="http://cxf.apache.org/transports/http-jetty/configuration"	xmlns:cxf="http://camel.apache.org/schema/cxf"	xsi:schemaLocation="       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/osgi http://www.springframework.org/schema/osgi/spring-osgi.xsd       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd       http://cxf.apache.org/transports/http-jetty/configuration http://cxf.apache.org/schemas/configuration/http-jetty.xsd">	<import resource="classpath:META-INF/sef-core/beans.xml" />	<import resource="classpath:META-INF/sef-api/beans.xml" />	<bean id="cfg" class="com.ericsson.raso.sef.core.config.ConfigService" />	<bean id="cgProperties"		class="com.ericsson.raso.sef.core.config.ComponentPropertiesBean">		<constructor-arg name="config" ref="cfg" />		<constructor-arg name="component" value="activationScheduler" />	</bean>	<context:property-placeholder		properties-ref="cgProperties" />	<bean id="schedulerContext" class="com.ericsson.sef.scheduler.SchedulerContext" />	<bean id="sefScheduler" class="com.ericsson.sef.scheduler.DefaultSefScheduler" />	<!-- <bean class="org.apache.activemq.camel.component.ActiveMQComponent" 		id="activemq"> <property name="brokerURL" value="#{cfg.jmsEndpoint('sm-jms-broker').uri}"/> 		<property name="userName" value="#{cfg.jmsEndpoint('sm-jms-broker').username}"/> 		<property name="password" value="#{cfg.jmsEndpoint('sm-jms-broker').password}"/> 		</bean> -->	<bean id="schedulerService"		class="com.ericsson.sef.scheduler.TransactionalSchedulerService">		<constructor-arg name="scheduler" ref="sefScheduler" />	</bean>	<!-- <bean id="callingCircleClientFactory" class="org.apache.cxf.jaxws.JaxWsProxyFactoryBean"> 		<property name="serviceClass" value="com.ericsson.sm.api.notification.NotificationWorkflowService"/> 		<property name="address" value="#{cfg.soapEndpoint('callingCircleWs-client').address}"/> 		</bean> <bean id="callingCircleWorkflow" class="com.ericsson.sm.api.notification.NotificationWorkflowService" 		factory-bean="callingCircleClientFactory" factory-method="create"/> --><!-- 	<cxf:cxfEndpoint id="subscriptionResponse"		serviceClass="com.ericsson.sef.bes.api.subscription.ISubscriptionResponse">		<cxf:properties>			<entry key="address" value="http://0.0.0.0:8080/services/ws/iSubscriptionResponse" />		</cxf:properties>	</cxf:cxfEndpoint>	<cxf:cxfEndpoint id="subscriberResponse"		serviceClass="com.ericsson.sef.bes.api.subscriber.ISubscriberResponse">		<cxf:properties>			<entry key="address" value="http://0.0.0.0:8080/services/ws/iSubscriberResponse" />		</cxf:properties>	</cxf:cxfEndpoint> --><bean id="dataSource" class="oracle.jdbc.pool.OracleDataSource" destroy-method="close">         <property name="URL" value="${url}" />         <property name="user" value="${username}"/>         <property name="password" value="${password}"/>         <property name="connectionCachingEnabled" value="false"/>     </bean>	<!-- <bean id="dataSource" class="org.apache.tomcat.dbcp.dbcp.BasicDataSource"		destroy-method="close">		<property name="driverClassName" value="${driverClassName}" />		<property name="url" value="${url}" />		<property name="username" value="${username}" />		<property name="password" value="${password}" />		<property name="testWhileIdle" value="${testWhileIdle}" />		<property name="testOnReturn" value="${testOnReturn}" />		<property name="validationQuery" value="${validationQuery}" />		<property name="validationQueryTimeout" value="${validationQueryTimeout}" />		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />		<property name="maxActive" value="${maxActive}" />		<property name="maxIdle" value="${maxIdle}" />		<property name="minIdle" value="${minIdle}" />		<property name="maxWait" value="${maxWait}" />		<property name="initialSize" value="${initialSize}" />		<property name="removeAbandoned" value="${removeAbandoned}" />		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />		<property name="logAbandoned" value="${logAbandoned}" />		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />	</bean> -->	<camelContext id="com.ericsson.sef.scheduler" xmlns="http://camel.apache.org/schema/spring">	<!-- 	<route>			<from uri="cxf:bean:subscriptionResponse" />			<camel:doTry>				<camel:choice>					<camel:when> <camel:simple>${header.operationName} == 'discoverOfferByFederatedId'</camel:simple> 						<camel:bean beanType="com.ericsson.raso.sef.smart.subscription.response.DiscoverOfferByFederatedIdResponseProcessor"/> 						</camel:when>					<camel:when>						<camel:simple>${header.operationName} == 'purchase'</camel:simple>						<camel:bean							beanType="com.ericsson.raso.sef.smart.subscription.response.PurchaseResponseProcessor" />					</camel:when>					<camel:when>						<camel:simple>${header.operationName} == 'renew'</camel:simple>						<camel:bean							beanType="com.ericsson.raso.sef.smart.subscription.response.RenewResponseProcessor" />					</camel:when>					<camel:when> <camel:simple>${header.operationName} == 'expiry'</camel:simple> 						<camel:bean beanType="com.ericsson.raso.sef.smart.subscription.response.ExpiryResponseProcessor"/> 					</camel:when>					<camel:when> <camel:simple>${header.operationName} == 'terminate'</camel:simple> 						<camel:bean beanType="com.ericsson.raso.sef.smart.subscription.response.TerminateResponseProcessor"/> 						</camel:when> <camel:when> <camel:simple>${header.operationName} == 'expiry'</camel:simple> 						<camel:bean beanType="com.ericsson.raso.sef.smart.subscription.response.ExpiryResponseProcessor"/> 						</camel:when> <camel:when> <camel:simple>${header.operationName} == 'preExpiry'</camel:simple> 						<camel:bean beanType="com.ericsson.raso.sef.smart.subscription.response.PreExpiryResponseProcessor"/> 						</camel:when> <camel:when> <camel:simple>${header.operationName} == 'preRewnal'</camel:simple> 						<camel:bean beanType="com.ericsson.raso.sef.smart.subscription.response.PreRenewResponseProcessor"/> 						</camel:when>				</camel:choice>				<camel:doFinally>					Add exception handler				</camel:doFinally>			</camel:doTry>		</route> --><!-- 		<route>			<from uri="cxf:bean:subscriberResponse" />			<camel:doTry>				<camel:choice>					<camel:when> <camel:simple>${header.operationName} == 'createSubscriber'</camel:simple> 						<camel:bean beanType="com.ericsson.raso.sef.smart.subscriber.response.CreateSubscriberProcessor" 						/> </camel:when>					<camel:when>						<camel:simple>${header.operationName} == 'readSubscriber'</camel:simple>						<camel:bean							beanType="com.ericsson.raso.sef.smart.subscriber.response.ReadSubscriberProcessor" />					</camel:when>					<camel:when> <camel:simple>${header.operationName} == 'updateSubscriber'</camel:simple> 						<camel:bean beanType="com.ericsson.raso.sef.smart.subscriber.response.UpdateSubscriberProcessor"/> 						</camel:when> <camel:when> <camel:simple>${header.operationName} == 'deleteSubscriber'</camel:simple> 						<camel:bean beanType="com.ericsson.raso.sef.smart.subscriber.response.DeleteSubscriberProcessor"/> 						</camel:when> <camel:when> <camel:simple>${header.operationName} == 'handleLifeCycle'</camel:simple> 						<camel:bean beanType="com.ericsson.raso.sef.smart.subscriber.response.HandleLifeCycleSubscriberProcessor"/> 						</camel:when>				</camel:choice>				<camel:doFinally>					Add exception handler				</camel:doFinally>			</camel:doTry>		</route> -->	</camelContext></beans>